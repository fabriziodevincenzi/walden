---
interface Author {
  name: string;
  role: string;
  image?: string;
}

interface Props {
  title: string;
  description: string;
  pubDate: Date;
  author: Author;
  category: 'editoriale' | 'reportage' | 'escursione' | 'multimedia';
  featured: boolean;
  tags: string[];
  cover?: string;
  url: string;
  size?: 'large' | 'medium';
  isMultimedia?: boolean;
}

const { 
  title,
  description,
  pubDate,
  author,
  category,
  featured,
  tags,
  cover,
  url,
  size = 'medium',
  isMultimedia = false
} = Astro.props;

const formattedDate = new Intl.DateTimeFormat('it-IT', {
  day: 'numeric',
  month: 'long',
  year: 'numeric'
}).format(pubDate);
---

<article class={`article article--${size}`}>
  {cover && (
    <a href={url} class="article-image-link">
      <figure class="article-img">
        <img src={cover} alt={title} />
      </figure>
    </a>
  )}
  
  <div class="article-content">
    <div class="article-meta">
      <span class="article-category">{category}</span>
      <time datetime={pubDate.toISOString()}>{formattedDate}</time>
    </div>

    <h2 class={`article-title article-title--${size}`}>
      <a href={url} class="article-link">{title}</a>
    </h2>

    <p class="article-description">{description}</p>

    {author && (
      <div class="article-author">
        {author.image && (
          <div class="article-author-img">
            <img src={author.image} alt={author.name} />
          </div>
        )}
        <div class="article-author-info">
          <span class="author-name">{author.name}</span>
          <span class="author-role">{author.role}</span>
        </div>
      </div>
    )}

    {isMultimedia && (
      <div class="article-multimedia-badge">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <polygon points="23 7 16 12 23 17 23 7"/>
          <rect x="1" y="5" width="15" height="14" rx="2" ry="2"/>
        </svg>
      </div>
    )}
  </div>
</article>

<style>
.article {
  display: flex;
  flex-direction: column;
  gap: var(--space-m);
}

.article-image-link {
  display: block;
  overflow: hidden;
  border-radius: 8px;
}

.article-category {
  color: var(--color-primary);
  font-weight: 600;
  text-transform: uppercase;
}

.article-img {
  aspect-ratio: 16/9;
  overflow: hidden;
  
  img {
    width: 100%;
    height: 100%;
    transition: transform 0.3s ease;
  }
  
  &:hover img {
    transform: scale(1.05);
  }
}

.article-title {
  margin: var(--space-xs) 0;
}

.article-title--large {
  font-size: var(--font-size-2xl);
}

.article-title--medium {
  font-size: var(--font-size-xl);
}

.article-link {
  color: inherit;
  text-decoration: none;
  
  &:hover {
    color: var(--color-accent);
  }
}

.article-excerpt {
  color: var(--color-gray-400);
  font-size: var(--font-size-base);
  line-height: var(--line-height-normal);
}

.article-meta {
  display: flex;
  gap: var(--space-s);
  font-size: var(--font-size-sm);
  color: var(--color-text-secondary);
}

.article-author {
  display: flex;
  align-items: center;
  gap: var(--space-xs);
}

.article-author-img {
  width: 2.5rem;
  height: 2.5rem;
  border-radius: 50%;
  overflow: hidden;
}

.article-author-info {
  display: flex;
  flex-direction: column;
  gap: 2px;
}

.author-name {
  font-weight: 600;
  font-size: var(--font-size-small);
}

.author-role {
  font-size: var(--font-size-small);
  color: var(--color-gray-400);
}

.article-date {
  font-size: var(--font-size-small);
  color: var(--color-gray-400);
}

.article-description {
  color: var(--color-text-secondary);
  line-height: 1.6;
}
</style>